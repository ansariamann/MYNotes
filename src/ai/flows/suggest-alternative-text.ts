// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview This file defines a Genkit flow for suggesting alternative text arrangements.
 *
 * - suggestAlternativeText - A function that suggests alternative text arrangements for a given note.
 * - SuggestAlternativeTextInput - The input type for the suggestAlternativeText function.
 * - SuggestAlternativeTextOutput - The output type for the suggestAlternativeText function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestAlternativeTextInputSchema = z.object({
  noteContent: z
    .string()
    .describe('The content of the note for which to suggest alternative text arrangements.'),
  context: z
    .string()
    .optional()
    .describe('The context of the note, which may include its purpose or intended audience.'),
});
export type SuggestAlternativeTextInput = z.infer<typeof SuggestAlternativeTextInputSchema>;

const SuggestAlternativeTextOutputSchema = z.object({
  suggestions: z
    .array(z.string())
    .describe('An array of suggested alternative text arrangements for the note.'),
});
export type SuggestAlternativeTextOutput = z.infer<typeof SuggestAlternativeTextOutputSchema>;

export async function suggestAlternativeText(
  input: SuggestAlternativeTextInput
): Promise<SuggestAlternativeTextOutput> {
  return suggestAlternativeTextFlow(input);
}

const suggestAlternativeTextPrompt = ai.definePrompt({
  name: 'suggestAlternativeTextPrompt',
  input: {schema: SuggestAlternativeTextInputSchema},
  output: {schema: SuggestAlternativeTextOutputSchema},
  prompt: `You are an AI assistant specialized in suggesting alternative text arrangements for notes.

  Given the content of a note and its context, provide several alternative text arrangements that enhance the clarity, tone, and impact of the writing.

  Note Content: {{{noteContent}}}
  Context: {{{context}}}

  Suggestions:
  `,config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_ONLY_HIGH',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_LOW_AND_ABOVE',
      },
    ],
  },
});

const suggestAlternativeTextFlow = ai.defineFlow(
  {
    name: 'suggestAlternativeTextFlow',
    inputSchema: SuggestAlternativeTextInputSchema,
    outputSchema: SuggestAlternativeTextOutputSchema,
  },
  async input => {
    const {output} = await suggestAlternativeTextPrompt(input);
    return output!;
  }
);
